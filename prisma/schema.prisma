generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  password          String
  role              UserRole  @default(CUSTOMER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  likes             Like[]
  verificationToken String?   @unique
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?

  @@index([email])
}

model Restaurant {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  imageUrl    String?
  cuisine     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  orders      Order[]
  tables      Table[]
  categories  Category[] 
  menuItems   MenuItem[] 

  @@index([name])
}

model Table {
  id           Int         @id @default(autoincrement())
  number       Int
  capacity     Int
  status       TableStatus @default(AVAILABLE)
  restaurantId Int
  imageUrl     String?
  orders       Order[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId, number])
}

model Category {
  id           Int       @id @default(autoincrement())
  name         String
  imageUrl     String?
  description  String?
  displayOrder Int       @default(0)
  restaurantId Int
  items        MenuItem[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([restaurantId, name])
}

model MenuItem {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  price          Decimal          @db.Decimal(10, 2)
  imageUrl       String?
  isAvailable    Boolean          @default(true)
  displayOrder   Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  categoryId     Int
  restaurantId   Int
  menuItemOptions MenuItemOption[]
  orderItems     OrderItem[]
  likes         Like[]

  category      Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@index([categoryId])
  @@index([restaurantId])
}

model MenuItemOption {
  id               Int               @id @default(autoincrement())
  name             String
  priceAdjustment  Decimal           @db.Decimal(10, 2)
  isRequired       Boolean           @default(false)
  menuItemId       Int
  optionChoices    OptionChoice[]
  orderItemChoices OrderItemChoice[]
  
  menuItem         MenuItem          @relation(fields: [menuItemId], references: [id])

  @@index([menuItemId])
}

model OptionChoice {
  id               Int               @id @default(autoincrement())
  name             String
  priceAdjustment  Decimal           @db.Decimal(10, 2)
  menuItemOptionId Int
  orderItemChoices OrderItemChoice[]

  menuItemOption   MenuItemOption    @relation(fields: [menuItemOptionId], references: [id])

  @@index([menuItemOptionId])
}

model Order {
  id            Int         @id @default(autoincrement())
  status        OrderStatus @default(NEW)
  totalAmount   Decimal     @db.Decimal(10, 2)
  tableId       Int
  restaurantId  Int
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  orderItems    OrderItem[]

  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])
  table         Table?      @relation(fields: [tableId], references: [id])

  @@index([restaurantId])
  @@index([tableId])
}

model OrderItem {
  id                Int               @id @default(autoincrement())
  quantity          Int
  unitPrice        Decimal           @db.Decimal(10, 2)
  orderId          Int
  menuItemId       Int
  notes            String?
  status           OrderItemStatus   @default(NEW)
  orderItemChoices OrderItemChoice[]

  menuItem         MenuItem          @relation(fields: [menuItemId], references: [id])
  order           Order             @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([menuItemId])
}

model OrderItemChoice {
  id               Int            @id @default(autoincrement())
  orderId          Int
  menuItemOptionId Int
  optionChoiceId   Int
  
  optionChoice     OptionChoice   @relation(fields: [optionChoiceId], references: [id])
  menuItemOption   MenuItemOption @relation(fields: [menuItemOptionId], references: [id])
  orderItem        OrderItem      @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([menuItemOptionId])
  @@index([optionChoiceId])
}

model Like {
  id           Int      @id @default(autoincrement())
  rating       Int?
  comment      String?
  userId       String
  menuItemId   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  menuItem     MenuItem @relation(fields: [menuItemId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, menuItemId])
  @@index([userId])
  @@index([menuItemId])
}

enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

enum OrderStatus {
  NEW
  PREPARING
  COMPLETED
  CANCELLED
}

enum OrderItemStatus {
  NEW
  PREPARING
  READY
  DELIVERED
  COMPLETED
  CANCELLED
}
